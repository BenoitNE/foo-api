# Foo API - Template Spring Boot 3 & Java 24

Ce projet est un template pour la cr√©ation d'API REST avec Java 24, Spring Boot 3, et les bonnes pratiques modernes.
Il vise √† fournir une base solide pour le d√©veloppement d'applications robustes, testables et maintenables.

---

## ‚úÖ Pr√©requis

- JDK 24 ou sup√©rieur
- Maven 3.9.x ou sup√©rieur
- Docker & Docker Compose *(optionnel, pour lancer les d√©pendances comme la base de donn√©es)*
- Un IDE (IntelliJ IDEA, VS Code, Eclipse‚Ä¶)

---

## üîß Build & Lancement

### üî® Build

Compiler le projet et ex√©cuter les tests :
./mvnw clean install


Compiler sans ex√©cuter les tests :
./mvnw clean package -DskipTests


### üöÄ Lancement

Lancer le JAR ex√©cutable (apr√®s build) :
java -jar target/foo-api-0.0.1-SNAPSHOT.jar


Lancer avec un profil Spring sp√©cifique :
java -jar target/foo-api-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev


### üê≥ Lancement avec Docker Compose (exemple)

Construire et lancer l'application avec ses d√©pendances (ex : base de donn√©es) :
docker-compose up --build

---

## üß™ Tests

Ex√©cuter tous les tests :
./mvnw test


Ex√©cuter un test unitaire sp√©cifique :
./mvnw test -Dtest=com.example.fooapi.service.FooServiceTest


Ex√©cuter un test d'int√©gration sp√©cifique :
./mvnw test -Dit.test=com.example.fooapi.controller.FooControllerIT

---

## üìö Documentation API (Swagger)

Une fois l'application lanc√©e, la documentation OpenAPI (Swagger UI) est accessible √† l'adresse suivante :

- Swagger UI : [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)
- Sp√©cification OpenAPI (JSON) : [http://localhost:8080/api-docs](http://localhost:8080/api-docs)

---

## üîê S√©curit√©

La s√©curit√© est g√©r√©e par **Spring Security**. Les aspects cl√©s incluent :

- Authentification JWT *(exemple √† impl√©menter compl√®tement)*
- Hashing des mots de passe avec **BCrypt**
- Autorisation bas√©e sur les r√¥les/permissions
- Protection contre les vuln√©rabilit√©s courantes (XSS, CSRF avec pr√©cautions pour les API stateless)
- Configuration CORS si n√©cessaire

üëâ Consultez le fichier
`src/main/java/com/example/fooapi/config/SecurityConfig.java`
pour la configuration de base.

---

## üìÑ Logging

La journalisation est configur√©e via **SLF4J** avec **Logback**.
La configuration se trouve dans :

src/main/resources/logback-spring.xml

Les logs sont √©crits sur la console et dans un fichier :
logs/foo-api.log

---

## üí° Autres Bonnes Pratiques Impl√©ment√©es

- Gestion centralis√©e des exceptions (**GlobalExceptionHandler**)
- Validation des DTOs avec **Bean Validation** (`jakarta.validation`)
- Mapping Entit√©/DTO avec **MapStruct**
- Architecture en couches : **Controller**, **Service**, **Repository**
- Utilisation de **Lombok** pour r√©duire le code boilerplate
- Pr√©paration √† la conteneurisation avec un `Dockerfile`
- Endpoints **Actuator** pour le monitoring *(ex : `/actuator/health`)*

---